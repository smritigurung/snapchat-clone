{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","features/appSlice.js","Preview.js","Chat.js","Chats.js","ChatView.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstraints","width","height","facingMode","WebcamCapture","webcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","provider","GoogleAuthProvider","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","app","selectSelectedImage","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","profilePic","timestamp","FieldValue","serverTimestamp","Chat","doc","set","merge","Avatar","date","Date","toDate","toUTCString","Chats","useState","posts","setPosts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","placeholder","type","ChatView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","catch","alert","message","App","onAuthStateChanged","authUser","basename","process","path","exact","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92fa1953.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const cameraSlice = createSlice({\n  name: 'camera',\n  initialState: {\n    cameraImage: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n    // When we set the cameraImage, we want to change the state so that it changes the cameraImage \n    // inside of our state to whatever we pass in the action payload\n    setCameraImage: (state, action) => {\n      state.cameraImage = action.payload\n    },\n    resetCameraImage: (state) => {\n      state.cameraImage = null\n    }\n  }\n\n})\n\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions\n\nexport const selectCameraImage = (state) => state.camera.cameraImage\n\nexport default cameraSlice.reducer\n","import React, { useRef, useCallback } from \"react\";\nimport Webcam from \"react-webcam\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport { useDispatch } from \"react-redux\";\nimport { setCameraImage } from \"./features/cameraSlice\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./WebcamCapture.css\";\n\nconst videoConstraints = {\n  width: 250,\n  height: 400,\n  facingMode: \"user\",\n};\n\nfunction WebcamCapture() {\n  const webcamRef = useRef(null);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const capture = useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    dispatch(setCameraImage(imageSrc));\n    history.push(\"/preview\");\n  }, [webcamRef]);\n\n  return (\n    <div className=\"webcamCapture\">\n      <Webcam\n        audio={false}\n        height={videoConstraints.height}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n        width={videoConstraints.width}\n        videoConstraints={videoConstraints}\n      />\n      <RadioButtonUncheckedIcon\n        className=\"webcamCapture__button\"\n        onClick={capture}\n        fontSize=\"large\"\n      />\n    </div>\n  );\n}\n\nexport default WebcamCapture;\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBXnSj8_whRD2LKkI-uXwEZKSRnBYQ66Wk',\n  authDomain: 'snapchat-clone-37497.firebaseapp.com',\n  projectId: 'snapchat-clone-37497',\n  storageBucket: 'snapchat-clone-37497.appspot.com',\n  messagingSenderId: '717367110986',\n  appId: '1:717367110986:web:1ce331f206f610d7a525b3'\n}\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\nconst db = firebaseApp.firestore()\nconst auth = firebase.auth()\nconst storage = firebase.storage()\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport { db, auth, storage, provider }\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const appSlice = createSlice({\n  name: \"app\",\n  initialState: {\n    user: null,\n    selectedImage: null,\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n    selectImage: (state, action) => {\n      state.selectedImage = action.payload;\n    },\n    resetImage: (state) => {\n      state.selectedImage = null;\n    },\n  },\n});\n\nexport const { login, logout, selectImage, resetImage } = appSlice.actions;\n\nexport const selectUser = (state) => state.app.user;\nexport const selectSelectedImage = (state) => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./Preview.css\";\nimport { selectCameraImage, resetCameraImage } from \"./features/cameraSlice\";\nimport { useHistory } from \"react-router-dom\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport NoteIcon from \"@material-ui/icons/Note\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\nimport CropIcon from \"@material-ui/icons/Crop\";\nimport TimerIcon from \"@material-ui/icons/Timer\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { v4 as uuid } from \"uuid\";\nimport { storage, db } from \"./firebase\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/appSlice\";\n\nfunction Preview() {\n  const cameraImage = useSelector(selectCameraImage);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    if (!cameraImage) {\n      history.replace(\"/\");\n    }\n  }, [cameraImage, history]);\n\n  const closePreview = () => {\n    dispatch(resetCameraImage());\n  };\n\n  const sendPost = () => {\n    const id = uuid();\n    const uploadTask = storage\n      .ref(`posts/${id}`)\n      .putString(cameraImage, \"data_url\");\n\n    uploadTask.on(\n      \"state_changed\",\n      null,\n      (error) => {\n        // Error message when an error occurs when uploading image\n        console.log(error);\n      },\n      () => {\n        // Complete function when upload finishes\n        storage\n          .ref(\"posts\")\n          .child(id)\n          .getDownloadURL()\n          .then((url) => {\n            db.collection(\"posts\").add({\n              imageUrl: url,\n              username: user.username,\n              read: false,\n              profilePic: user.profilePic,\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            });\n            history.replace(\"/chats\");\n          });\n      }\n    );\n  };\n\n  return (\n    <div className=\"preview\">\n      <CloseIcon onClick={closePreview} className=\"preview__close\" />\n      <div className=\"preview__toolbarRight\">\n        <TextFieldsIcon />\n        <CreateIcon />\n        <NoteIcon />\n        <MusicNoteIcon />\n        <AttachFileIcon />\n        <CropIcon />\n        <TimerIcon />\n      </div>\n      <img src={cameraImage} alt=\"\" />\n      <div onClick={sendPost} className=\"preview__footer\">\n        <h2>Send Now</h2>\n        <SendIcon fontSize=\"small\" className=\"preview__sendIcon\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Preview;\n","import React from \"react\";\nimport \"./Chat.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\";\nimport ReactTimeago from \"react-timeago\";\nimport { useDispatch } from \"react-redux\";\nimport { selectImage } from \"./features/appSlice\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"./firebase\";\n\nfunction Chat({ id, username, timestamp, read, imageUrl, profilePic }) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const open = () => {\n    if (!read) {\n      dispatch(selectImage(imageUrl));\n      db.collection(\"posts\").doc(id).set(\n        {\n          read: true,\n        },\n        { merge: true }\n      );\n      history.push(\"/chats/view\");\n    }\n  };\n\n  return (\n    <div onClick={open} className=\"chat\">\n      <Avatar className=\"chat__avatar\" src={profilePic} />\n      <div className=\"chat__info\">\n        <h4>{username}</h4>\n        <p>\n          {!read && \"Tap to view -\"}{\" \"}\n          <ReactTimeago date={new Date(timestamp?.toDate()).toUTCString()} />\n        </p>\n      </div>\n\n      {!read && <StopRoundedIcon className=\"chat__readIcon\" />}\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./Chats.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport { db, auth } from \"./firebase\";\nimport { useState, useEffect } from \"react\";\nimport Chat from \"./Chat.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser } from \"./features/appSlice\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport { useHistory } from \"react-router-dom\";\nimport { resetCameraImage } from \"./features/cameraSlice\";\n\nfunction Chats() {\n  const [posts, setPosts] = useState([]);\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            data: doc.data(),\n          }))\n        )\n      );\n  }, []);\n\n  const takeSnap = () => {\n    dispatch(resetCameraImage());\n    history.push(\"/\");\n  };\n\n  return (\n    <div className=\"chats\">\n      <div className=\"chats__header\">\n        <Avatar\n          src={user.profilePic}\n          onClick={() => auth.signOut()}\n          className=\"chats__avatar\"\n        />\n        <div className=\"chats__search\">\n          <SearchIcon className=\"chats__searchIcon\" />\n          <input placeholder=\"Friends\" type=\"text\" />\n        </div>\n        <ChatBubbleIcon className=\"chats__chatIcon\" />\n      </div>\n      <div className=\"chats__posts\">\n        {posts.map(\n          ({\n            id,\n            data: { profilePic, username, timestamp, imageUrl, read },\n          }) => (\n            <Chat\n              key={id}\n              id={id}\n              username={username}\n              timestamp={timestamp}\n              imageUrl={imageUrl}\n              read={read}\n              profilePic={profilePic}\n            />\n          )\n        )}\n      </div>\n      <RadioButtonUncheckedIcon\n        className=\"chats__takePicIcon\"\n        onClick={takeSnap}\n        fontSize=\"large\"\n      />\n    </div>\n  );\n}\n\nexport default Chats;\n","import React, { useEffect } from \"react\";\nimport \"./ChatView.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectSelectedImage } from \"./features/appSlice\";\nimport { useHistory } from \"react-router-dom\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nfunction ChatView() {\n  const selectedImage = useSelector(selectSelectedImage);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!selectedImage) {\n      exit();\n    }\n  }, [selectedImage]);\n\n  const exit = () => {\n    history.replace(\"./chats\");\n  };\n\n  return (\n    <div className=\"chatView\">\n      <img src={selectedImage} onClick={exit} alt=\"\" />\n      <div className=\"chatView__timer\">\n        <CountdownCircleTimer\n          isPlaying\n          duration={10}\n          strokeWidth={6}\n          size={50}\n          colors={[\n            [\"#004777\", 0.33],\n            [\"#F7B801\", 0.33],\n            [\"#A30000\", 0.33],\n          ]}\n        >\n          {({ remainingTime }) => {\n            if (remainingTime === 0) {\n              exit();\n            }\n            return remainingTime;\n          }}\n        </CountdownCircleTimer>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatView;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { auth, provider } from \"./firebase\";\nimport { login } from \"./features/appSlice\";\n\nfunction Login() {\n  const dispatch = useDispatch();\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        dispatch(\n          login({\n            username: result.user.displayName,\n            profilePic: result.user.photoURL,\n            id: result.user.uid,\n          })\n        );\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <img src=\"https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg\" alt=\"\" />\n        <Button variant=\"outlined\" onClick={signIn}>\n          Sign in\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport WebcamCapture from \"./WebcamCapture\";\nimport Preview from \"./Preview\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Chats from \"./Chats\";\nimport \"./App.css\";\nimport ChatView from \"./ChatView\";\nimport { selectUser, login, logout } from \"./features/appSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Login from \"./Login\";\nimport { auth } from \"./firebase\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(\n          login({\n            username: authUser.displayName,\n            profilePic: authUser.photoURL,\n            id: authUser.uid,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Router basename={process.env.PUBLIC_URL + \"/\"}>\n        {!user ? (\n          <Login />\n        ) : (\n          <>\n            <img\n              className=\"app__logo\"\n              src=\"https://lakeridgenewsonline.com/wp-content/uploads/2020/04/snapchat.jpg\"\n              alt=\"\"\n            />\n            <div className=\"app__body\">\n              <div className=\"app__bodyBackground\">\n                {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n                <Switch>\n                  <Route path=\"/chats/view\">\n                    <ChatView />\n                  </Route>\n                  <Route path=\"/chats\">\n                    <Chats />\n                  </Route>\n                  <Route path=\"/preview\">\n                    <Preview />\n                  </Route>\n                  <Route exact path=\"/\">\n                    <WebcamCapture />\n                  </Route>\n                </Switch>\n              </div>\n            </div>\n          </>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport appReducer from '../features/appSlice'\nimport cameraReducer from '../features/cameraSlice'\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    camera: cameraReducer\n  }\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}